def sign(x):
	if x < 0:
		return -1
	if x > 0:
		return 1
	return 0


class Card:
	def __gt__(self, other_card):
		self.deck.compare(self, other_card, 1)

	def __lt__(self, other_card):
		self.deck.compare(self, other_card, -1)

	def __eq__(self, other_card):
		self.deck.compare(self, other_card, 0)


class Pile():
	def __init__(self, target, start_x=0, start_y=0, top_card_hidden=True, other_cards_hidden=True, layout_horizontal=True, layout_direction=0, layout_offset=0)
	layout_direction (+1 = left-to-right / top-to-bottom, -1 = right-to-left / bottom-to-top, 0 = no offset
	layout_offset (= stacking_offset_x, stacking_offset_y, cards.width, cards.height or 0)
	top_card_hidden
	other_cards_hidden
	ordered (True = list, pull/place from top only, False = Set, pull/place anywhere)
	start_x
	start_y
	next_x
	next_y
	_in_pile = []
	methods:
		shuffle
		pull
		place
		sort
		in_pile
	def place(self, card, top_card=False):
		self.in_pile.add(card)
		if top_card:
			hidden=self._top_card_hidden
		else:
			hidden=self._other_cards_hidden
		card.render(self._target, next_x, next_y, hidden=hidden)
		if layout_horizontal == True:
			next_x += layout_direction * layout_offset
		else:
			next_y += layout_direction * layout_offset


class Hand(Pile):
	def __init__(self, is_dealer=False, **kwargs):
		self._is_dealer = is_dealer
		super().__init__(*args, **kwargs)


class Cards(Pile):
	small: bool (True if width < ?)
	compare_rules = {
		_colors_must_match: bool (for __eq__)
		_suit_must_match:  bool (for __eq__)
		_rank_order (for __lt__ and __gt__)
		_suit_order (for __lt__ and __gt__; if len()=0, all are equal; if len()=1, one suit is trump; if len()=4, they are ordered
	def compare(self, card1, card2, comparison=0):
		if _suit_order:
			if suit1_score := self._suit_order.count(card1.suit):
				suit1_score = 4 - self._suit_order.index(card1.suit)
			if suit2_score := self._suit_order.count(card2.suit):
				suit2_score = 4 - self._suit_order.index(card1.suit)
			if (suit_comparison := sign(suit1_score - suit2_score)) != 0:
				return suit_comparison == comparison
		return sign(self._rank_order.index(card1.rank) - self._rank_order.index(card2.rank)) == comparison


class Game(Cards):
	(override compare_rules and/or compare if necessary)
	def __init__(self, target, *args, **kwargs):
		self.target = target
		self.show = target.show if hasattr(target, "show") else lambda: None
		self.dealer=Hand(True, target=target, start_x=0, start_y=0, top_card_hidden=False, other_cards_hidden=True, layout_horizontal=True, layout_direction=1, layout_offset=self.width)
		self.player1=Hand(False, target=target, start_x=0, start_y=display_drv.height-self.height, top_card_hidden=False, other_cards_hidden=False, layout_horizontal=True, layout_direction=1, layout_offset=self.width)


	def deal(self):
		self.player1.place(self.draw_one())
		self.dealer.place(self.draw_one(), top_card=True)
		self.player1.place(self.draw_one())
		self.dealer.place(self.draw_one())

	def hit(self, hand):
		hand.place(self.draw_one())


games:
concentration
War
crazy eights
go fish
